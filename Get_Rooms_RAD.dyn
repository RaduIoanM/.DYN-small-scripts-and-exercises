{
  "Uuid": "791ab5b3-7c59-46ff-ac8f-385e80e69373",
  "IsCustomNode": false,
  "Description": "Gets the Level, Room Name and Room Number  and implements it in the casework elements (for all elements)",
  "Name": "Get_Rooms_2",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [
    {
      "Id": "e24937d8d83f4f9b9984238850efd33e",
      "Name": "Watch",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualize the node's output"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Dynamo CPython3 â€” Linked Rooms -> Casework (Player-friendly)\r\n# OUT[0]: one-line summary for Dynamo Player\r\n# OUT[1]: detailed log list\r\n\r\nimport clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# --------------------------- USER CONFIG ---------------------------\r\nAUTHOR_GITHUB = \"https://github.com/RaduIoanM\"\r\nPREF_LINK_NAME = None  # set to substring of link name if you want to lock it\r\nTARGET_PARAMS = {\r\n    \"level\":  \"LPT_Position\",\r\n    \"number\": \"LPT_RaumNummer\",\r\n    \"name\":   \"LPT_UnterPosition\"\r\n}\r\n# -------------------------------------------------------------------\r\n\r\ndoc   = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndef get_casework():\r\n    sel_ids = list(uidoc.Selection.GetElementIds())\r\n    if sel_ids:\r\n        sel = [doc.GetElement(i) for i in sel_ids]\r\n        return [e for e in sel if isinstance(e, FamilyInstance) and\r\n                e.Category and e.Category.Id.IntegerValue == int(BuiltInCategory.OST_Casework)]\r\n    return list(FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Casework)\r\n                .WhereElementIsNotElementType())\r\n\r\ndef choose_link(name_hint=None):\r\n    links = list(FilteredElementCollector(doc).OfClass(RevitLinkInstance))\r\n    if not links:\r\n        return None, None\r\n    if name_hint:\r\n        for l in links:\r\n            if name_hint.lower() in (l.Name or \"\").lower():\r\n                ld = l.GetLinkDocument()\r\n                if ld:\r\n                    return l, ld\r\n    for l in links:\r\n        ld = l.GetLinkDocument()\r\n        if ld is None: continue\r\n        has_rooms = any(1 for _ in FilteredElementCollector(ld).OfCategory(BuiltInCategory.OST_Rooms)\r\n                        .WhereElementIsNotElementType())\r\n        if has_rooms:\r\n            return l, ld\r\n    return None, None\r\n\r\ndef inst_point(fi):\r\n    loc = fi.Location\r\n    if isinstance(loc, LocationPoint) and loc.Point:\r\n        return loc.Point\r\n    bb = fi.get_BoundingBox(None)\r\n    if bb:\r\n        return (bb.Min + bb.Max) * 0.5\r\n    return None\r\n\r\ndef find_room(link_inst, link_doc, host_pt):\r\n    try:\r\n        lpt = link_inst.GetTotalTransform().Inverse.OfPoint(host_pt)\r\n    except:\r\n        return None\r\n    rooms = FilteredElementCollector(link_doc).OfCategory(BuiltInCategory.OST_Rooms) \\\r\n                .WhereElementIsNotElementType()\r\n    for r in rooms:\r\n        try:\r\n            if r.IsPointInRoom(lpt):\r\n                return r\r\n        except:\r\n            pass\r\n    return None\r\n\r\ndef level_name(link_doc, room):\r\n    try:\r\n        lvl = link_doc.GetElement(room.LevelId)\r\n        if lvl:\r\n            return lvl.Name\r\n    except:\r\n        pass\r\n    try:\r\n        p = room.get_Parameter(BuiltInParameter.LEVEL_NAME)\r\n        if p and p.HasValue:\r\n            return p.AsString()\r\n    except:\r\n        pass\r\n    return \"\"\r\n\r\ndef set_text(fi, pname, text):\r\n    p = fi.LookupParameter(pname)\r\n    if p and not p.IsReadOnly:\r\n        try:\r\n            p.Set(\"\" if text is None else str(text))\r\n            return True\r\n        except:\r\n            return False\r\n    return False\r\n\r\n# ----- Main Execution -----\r\ncw = get_casework()\r\nlink_inst, link_doc = choose_link(PREF_LINK_NAME)\r\n\r\nlog = []\r\nok = skip = 0\r\n\r\nif not cw:\r\n    OUT = [\"No Casework found.\\n\" + AUTHOR_GITHUB, []]\r\nelif link_doc is None:\r\n    OUT = [\"No linked Rooms found.\\n\" + AUTHOR_GITHUB, []]\r\nelse:\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    for fi in cw:\r\n        pt = inst_point(fi)\r\n        if not pt:\r\n            skip += 1\r\n            fam_name = fi.Symbol.Family.Name if hasattr(fi, \"Symbol\") else \"(no family)\"\r\n            type_name = fi.Name\r\n            log.append(f\"Skip {fam_name} : {type_name} â€” no point\")\r\n            continue\r\n        room = find_room(link_inst, link_doc, pt)\r\n        if not room:\r\n            skip += 1\r\n            fam_name = fi.Symbol.Family.Name if hasattr(fi, \"Symbol\") else \"(no family)\"\r\n            type_name = fi.Name\r\n            log.append(f\"Skip {fam_name} : {type_name} â€” no linked room at location\")\r\n            continue\r\n\r\n        num = room.get_Parameter(BuiltInParameter.ROOM_NUMBER)\r\n        namep = room.get_Parameter(BuiltInParameter.ROOM_NAME)\r\n        rnum = num.AsString() if num and num.HasValue else \"\"\r\n        rname = namep.AsString() if namep and namep.HasValue else \"\"\r\n        rlvl = level_name(link_doc, room)\r\n\r\n        wrote = False\r\n        wrote |= set_text(fi, TARGET_PARAMS[\"level\"],  rlvl)\r\n        wrote |= set_text(fi, TARGET_PARAMS[\"number\"], rnum)\r\n        wrote |= set_text(fi, TARGET_PARAMS[\"name\"],   rname)\r\n\r\n        fam_name = fi.Symbol.Family.Name if hasattr(fi, \"Symbol\") else \"(no family)\"\r\n        type_name = fi.Name\r\n        if wrote:\r\n            ok += 1\r\n            log.append(f\"OK {fam_name} : {type_name} | {rlvl} | {rnum} | {rname}\")\r\n        else:\r\n            skip += 1\r\n            log.append(f\"Skip {fam_name} : {type_name} â€” parameters missing/read-only\")\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n\r\n    link_name = link_inst.Name if hasattr(link_inst, \"Name\") else \"(link)\"\r\n    summary_line1 = f\"Kudos! {ok} updated, {skip} skipped. Go check them out!\"\r\n    summary_line2 = f\"Feel free to drop some feedback ðŸ¦† {AUTHOR_GITHUB} ðŸ¦† Thanks a bunch!\"\r\n    OUT = [[summary_line1, summary_line2], log]\r\n\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "60614db40ea746989cf04456334c85f9",
      "Inputs": [
        {
          "Id": "aab78736dd204f30b9fb6d965687f42a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1d024b13e03417788d36211f0695e86",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e24937d8d83f4f9b9984238850efd33e",
      "Inputs": [
        {
          "Id": "0768bd748e4b46338a5d7f17fdb1e2a6",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "edf022df18e04681a52934fef9e22b39",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Kudos! Now go to the objects and double check it :) let me know if it workedfeedback here  ðŸ¦†  https://github.com/RaduIoanM  ðŸ¦† Thanks a bunch! ",
      "Id": "4c85588bd50f43bb905ed430724d0c27",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f5c20195add84bcbb6e33581c1271a95",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    }
  ],
  "Connectors": [
    {
      "Start": "a1d024b13e03417788d36211f0695e86",
      "End": "0768bd748e4b46338a5d7f17fdb1e2a6",
      "Id": "c7c45254ddbd485686948a84f5b8163c",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": "https://github.com/RaduIoanM",
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "Radu ",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.4.10216",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "60614db40ea746989cf04456334c85f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1439.817439763978,
        "Y": 284.73133283450767
      },
      {
        "Name": "Watch",
        "ShowGeometry": true,
        "Id": "e24937d8d83f4f9b9984238850efd33e",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 1727.594020554795,
        "Y": 550.71674838841614
      },
      {
        "Name": "String",
        "ShowGeometry": true,
        "Id": "4c85588bd50f43bb905ed430724d0c27",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 2075.3663452356764,
        "Y": 287.44847025008704
      }
    ],
    "Annotations": [],
    "X": -905.25477373724516,
    "Y": -80.752619080094576,
    "Zoom": 0.818099195675473
  }
}